http://papers.www9.org:8027/www9/x/menu

http://papers.www9.org:8027/x/dbn/edit/user/gjb
gjb,mywww9pass

Possible Analyses:
--> some of these are handled by compilations semantic analysis, but part of the
    point is that we can get the analyses w/o using such a heavyweight
    approach!

* metrics:
-> sgcount xml-unparsed/ClSimplexSolver.java.xml
* check that only abstract classes have abstract methods
-> sggrep -q '.*/class[abstract!=true]/method[abstract=true]' ComplexApplet.java.xml
* look for all sends of the message "drawString"
-> sggrep -q '.*/send[message=drawString]' xml-unparsed/ComplexApplet.java.xml 
* returns from inside loops
-> sggrep -q '.*/method/.*/loop|do-loop/.*/return' ComplexApplet.java.xml 
* assignments inside ifs:
-> sggrep -q '.*/if/test/assignment-expr' xml-unparsed/ComplexApplet.java.xml 
* check that all functions have only one return statement
=> cannot do this with sggrep, it seems --11/15/99 gjb
ALSO CANNOT DO ANYTHING THAT REQUIRES A TRANSFORMATION, OBVIOUSLY
* changing sense of a default parameter (via overriding, since no defaults in Java)
* renaming a method
* search for unused variables
* all definitions of variables of type int
-> sggrep -q '.*/local-variable' -s './type[name=int]' xml-unparsed/ComplexApplet.java.xml
* ensure that all variables of type String start with str (hungarian)
-> sggrep -q '.*/local-variable[name!~"^str"]' -s './type[name=String]' xml-unparsed/ComplexApplet.java.xml 
* etags
* list functions that send message "drawString" (contrast w/ above)
-> sggrep -q '.*/method' -s '.*/send[message=drawString]' xml-unparsed/ComplexApplet.java.xml | sgmltrans -r method-names.sgmltrans
---or---
-> sgrpg '.*/method' '.*/send[message=drawString]' '' '%s %s' visibility name < xml-unparsed/ComplexApplet.java.xml
* list functions that do not call a function
-> sggrep -v -q '.*/method' -s '.*/send[message=drawString]' xml-unparsed/ComplexApplet.java.xml | sgmltrans -r method-names.sgmltrans 
* add debug code at entry/exit to function
* better diff utility; canonical ast differ for cheating check


Compare versions of dtd w/ perlSGML's dtddiff.
e.g., make true-case an optional child of an if element

    ----------------------------------------------------------------------
                           Content Rule Differences
    ----------------------------------------------------------------------
         ------------------------------------------------------------
                                     <IF>

  << old content rule <<
  (test,true-case?,false-case?)

  >> new content rule >>
  (test,true-case,false-case?)




xmldiff from IBM AlphaWorks failed to get a nice diff for a simple
change of type made to the return parameter of FirstApplet.java.xml.
--11/22/99 gjb




XML DTD Stuff:

For SGML, If an attribute is specified to be empty, then when the tag is
used it should be <foo>, not <foo/> like it needs to be for XML.  The -c
option can be given to nsgmls to make it work for XML (see my nsgmls-xml 
script).


Duplicate attribute values not allowed in SGML:
http://www.oasis-open.org/cover/duplTokens.html

Perhaps this will be (or is) revised for XML? 


/////// If
    if ( !TimerIsRunning )                            // Normal case
      return (double) ElapsedMs/1000;
    else
      return (double) (ElapsedMs + System.currentTimeMillis() - StartReading)/1000;

<if><test>!TimerIsRunning</test>
  <true-case><return>...</return></true-case>
  <false-case><return>...</return></false-case>
</if>



/////// For
      for (Enumeration e = terms.keys(); e.hasMoreElements() ; ) {
	ClAbstractVariable clv = (ClAbstractVariable) e.nextElement();
	_terms.put(clv,((ClDouble) terms.get(clv)).clone());
      }

<for-loop>
   <init>...</init>
   <init>...</init>
   <test>...</test>
   <update>...</update>
   <update>...</update>
   <statements>
     ...
   </statements>
</for-loop




//////// Try

    try {
      fAddedOkDirectly = tryAddingDirectly(expr);
      if (!fAddedOkDirectly) {
        // could not add directly
        addWithArtificialVariable(expr);
      }
    } catch (ExCLRequiredFailure err) {
      throw err;
    }

<try>
  <statements>
    ...
  </statements>
  <catch>
    <formal-argument  type="ExCLRequiredFailure" name="err">
    <statements>
      ...
    </statements>
  </catch>
  <catch>
    <formal-argument type="Exception" name="exc">
    <statements>
      ...
    </statements>
  </catch>
  <finally>
     <statements>
       ...
     </statements>
  </finally>
</try>  



Thoughts for paper:


Future work:
 * preserve and attach comments appropriately


C++ : cpp has problems

Syntactic analysis phase of compiler is replaces with XML parser

Semantic analysis phase of compiler is simplified
 -> some analysis handled by validity check
   -> it'd be interesting to see which semantic errors jikes
      reports are handled by the XML validity check on my DTD
 -> well-formedness doesn't give us much, though

canonical external representation of AST for java source program
 -> interacting compilers, tools, etc.

Issue:
  for-loop element vs. loop:
  -> do we care about preserving the looping format initially chosen in source
  -> or should we canonicalize to <loop> element

Above is related to language translation issue:
  -> move away from language-specific syntax and constructs
  -> leads to more abstract representation
  -> tradeoff with preserving abstractions

Issue:
  -> field w/ attribute static, or instance-field and class-field?
  -> same for method element
  -> Bigger issue: these sorts of higher level conceptual changes good or bad?
     [[ need to look at use to better understand these issues ]]

Issue:
  -> mangling for id/idrefs


Issue:
  -> should field-access be separate from var-ref?
     this is a little weird:
<field-access field="println">
  <field-access field="err">
    <var-ref name="System">
  </field-access>
</field-access>



Properties of XML that influenced DTD design:

attributes are unordered, finite
 -> cannot use for arguments
attributes are only text strings, so cannot have references
 -> e.g., types need to be encoded as elements
    not 
     <method return-type="boolean" ...> ... 
    but
     <method ...><type name="boolean" primitive="true"/> ...
