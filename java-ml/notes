http://papers.www9.org:8027/www9/x/menu

http://papers.www9.org:8027/x/dbn/edit/user/gjb
gjb,mywww9pass

Possible Analyses:
* check that only abstract classes have abstract methods
* check that all functions have only one return statement
* changing sense of a default parameter (via overriding, since no defaults in Java)
* renaming a method
* search for unused variables
* etags
* list functions that do not call a function
* enforce hungarian naming convention

XML DTD Stuff:

If an attribute is specified to be entry, then when the tag
is used it should be <foo>, not <foo/>


Duplicate attribute values not allowed:
http://www.oasis-open.org/cover/duplTokens.html



/////// If
    if ( !TimerIsRunning )                            // Normal case
      return (double) ElapsedMs/1000;
    else
      return (double) (ElapsedMs + System.currentTimeMillis() - StartReading)/1000;

<if><test>!TimerIsRunning</test>
  <true-case><return>...</return></true-case>
  <false-case><return>...</return></false-case>
</if>



/////// For
      for (Enumeration e = terms.keys(); e.hasMoreElements() ; ) {
	ClAbstractVariable clv = (ClAbstractVariable) e.nextElement();
	_terms.put(clv,((ClDouble) terms.get(clv)).clone());
      }

<for-loop>
   <init>...</init>
   <init>...</init>
   <test>...</test>
   <update>...</update>
   <update>...</update>
   <statements>
     ...
   </statements>
</for-loop




//////// Try

    try {
      fAddedOkDirectly = tryAddingDirectly(expr);
      if (!fAddedOkDirectly) {
        // could not add directly
        addWithArtificialVariable(expr);
      }
    } catch (ExCLRequiredFailure err) {
      throw err;
    }

<try>
  <statements>
    ...
  </statements>
  <catch>
    <formal-argument  type="ExCLRequiredFailure" name="err">
    <statements>
      ...
    </statements>
  </catch>
  <catch>
    <formal-argument type="Exception" name="exc">
    <statements>
      ...
    </statements>
  </catch>
  <finally>
     <statements>
       ...
     </statements>
  </finally>
</try>  



Thoughts for paper:

C++ : cpp has problems

Syntactic analysis phase of compiler is replaces with XML parser

Semantic analysis phase of compiler is simplified
 -> some analysis handled by validity check

canonical external representation of AST for java source program
 -> interacting compilers, tools, etc.

Issue:
  for-loop element vs. loop:
  -> do we care about preserving the looping format initially chosen in source
  -> or should we canonicalize to <loop> element

Issue:
  -> field w/ attribute static, or instance-field and class-field?
  -> same for method element
  -> Bigger issue: these sorts of higher level conceptual changes good or bad?
     [[ need to look at use to better understand these issues ]]

Issue:
  -> mangling for id/idrefs
